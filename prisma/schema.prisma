// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Block {
    id       String   @id @default(cuid())
    name     String
    messages  Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    units   Unit[]
    batches Batch[]

    userId  String
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)


    @@index([userId])
}


model Unit {
    id       String   @id @default(cuid())
    name     String
    content  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    blockId  String
    block    Block    @relation(fields: [blockId], references: [id], onDelete: Cascade)

    
    
}

model Batch {
    id       String   @id @default(cuid())
    name     String
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    blockId  String
    block    Block    @relation(fields: [blockId], references: [id], onDelete: Cascade)
    
    testCompletions TestCompletion[]

}

model TestCompletion {
    id       String   @id @default(cuid())
    name     String
    content  Json   
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    success  Boolean

    actual   String  @db.VarChar(1000)
    expected String @db.VarChar(1000)

    batchId  String
    batch    Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)

}

enum Visible {
    PUBLIC
    PRIVATE
}

enum Payer {
    TOKENHOLDER
    PERSONALLY
}




model Chain {
    id       String   @id @default(cuid())

    messages   Json
    model      String @default("gpt-3.5-turbo")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId  String
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    }

model Workflow {
    id       String   @id @default(cuid())
    name     String
    visible   Visible @default(PRIVATE)
    payer   Payer @default(PERSONALLY)
    markup  Int @default(0)

    flow   Json

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId  String
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    blocks        Block[]
    workflows     Workflow[]
    promptaKeys   PromptaKey[]
    chains        Chain[]

    hasGPT4Access Boolean   @default(false)

    stripeCustomerId         String?
    stripeSubscriptionId     String?


    stripeGptThreePointFiveTurboID  String?

    stripeGptFourEightKPromptID  String?
    stripeGptFourEightKCompletionID  String?

    stripeGptFourThirtyTwoKPromptID  String?
    stripeGptFourThirtyTwoKCompletionID  String?

    stripeSubscriptionStatus StripeSubscriptionStatus?
}



model PromptaKey {
    id       String   @id @default(cuid())
    key      String   @unique

    lastUsed DateTime @default(now())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId  String
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model StripeEvent {
    id               String   @id @unique
    api_version      String?
    data             Json
    request          Json?
    type             String
    object           String
    account          String?
    created          DateTime
    livemode         Boolean
    pending_webhooks Int
}

enum StripeSubscriptionStatus {
    incomplete
    incomplete_expired
    trialing
    active
    past_due
    canceled
    unpaid
    paused
}